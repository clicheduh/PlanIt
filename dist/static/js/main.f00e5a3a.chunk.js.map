{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","href","onClick","SignedOutLinks","state","firebase","links","uid","Notifications","notifications","notifOnDashboard","map","item","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","project","title","createdAt","calendar","ProjectList","projects","projectsFromStore","Dashboard","this","Component","compose","console","log","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","authorFirstName","authorLastName","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","autoComplete","htmlFor","onChange","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","createUserWithEmailAndPassword","resp","doc","set","initials","CreateProject","createProject","history","push","authorId","add","Date","App","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","store","createStore","applyMiddleware","thunk","withExtraArgument","rrfProps","config","useFirestoreForProfile","userProfile","createFirestoreInstance","onAuthStateChanged","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f00e5a3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { signOut } from '../../store/actions/authActions';\r\n\r\nconst SignedInLinks = (props) => {\r\n    return (\r\n        <ul className=\"right\">\r\n            <li>\r\n                <NavLink to=\"/create\">New Project</NavLink>\r\n            </li>\r\n            <li>\r\n                <a href=\"/\" onClick={props.signOut}>\r\n                    Log out\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <NavLink to=\"/\" className=\"btn btn-floating pink lighten-1\">\r\n                    AS\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signOut: () => {\r\n            dispatch(signOut());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SignedInLinks);\r\n","export const signIn = (credentials) => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase\r\n            .auth()\r\n            .signInWithEmailAndPassword(credentials.email, credentials.password)\r\n            .then(() => {\r\n                dispatch({ type: 'LOGIN_SUCCESS' });\r\n            })\r\n            .catch((err) => {\r\n                dispatch({ type: 'LOGIN_ERROR', err: err });\r\n            });\r\n    };\r\n};\r\n\r\nexport const signOut = () => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase\r\n            .auth()\r\n            .signOut()\r\n            .then(() => dispatch({ type: 'LOGOUT_SUCCESS' }));\r\n    };\r\n};\r\n\r\nexport const signUp = (newUser) => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirebase().firestore();\r\n\r\n        firebase\r\n            .auth()\r\n            .createUserWithEmailAndPassword(newUser.email, newUser.password)\r\n            .then((resp) => {\r\n                return firestore\r\n                    .collection('users')\r\n                    .doc(resp.user.uid)\r\n                    .set({\r\n                        firstName: newUser.firstName,\r\n                        lastName: newUser.lastName,\r\n                        initials: newUser.firstName[0] + newUser.lastName[0]\r\n                    });\r\n            })\r\n            .then(() => {\r\n                dispatch({ type: 'SIGNUP_SUCCESS' });\r\n            })\r\n            .catch((err) => {\r\n                dispatch({ type: 'SIGNUP_ERROR', err });\r\n            });\r\n    };\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SignedOutLinks = () => {\r\n    return (\r\n        <ul className=\"right\">\r\n            <li>\r\n                <NavLink to=\"/signup\">Sign up</NavLink>\r\n            </li>\r\n            <li>\r\n                <NavLink to=\"/signin\">Log in</NavLink>\r\n            </li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default SignedOutLinks;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nimport SignedOutLinks from './SignedOutLinks';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Navbar = (props) => {\r\n    const { auth } = props;\r\n    const links = auth.uid ? <SignedInLinks /> : <SignedOutLinks />;\r\n    return (\r\n        <nav className=\"nav-wrapper grey darken-3\">\r\n            <div className=\"container\">\r\n                <Link to=\"/\" className=\"brand-logo\">\r\n                    PlanIt!\r\n                </Link>\r\n                {links}\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst Notifications = (props) => {\r\n    const { notifications } = props;\r\n    const notifOnDashboard = notifications\r\n        ? notifications.map((item) => {\r\n              return (\r\n                  <li key={item.id}>\r\n                      <span className=\"pink-text\">{item.user} </span>\r\n                      <span>{item.content}</span>\r\n                      <div className=\"grey-text note-date\">\r\n                          {moment(item.time.toDate()).fromNow()}\r\n                      </div>\r\n                  </li>\r\n              );\r\n          })\r\n        : null;\r\n    return (\r\n        <div className=\"section\">\r\n            <div className=\"card z-depth-0\">\r\n                <div className=\"card-content\">\r\n                    <span className=\"card-title\">Notifications</span>\r\n                    <ul>{notifOnDashboard}</ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notifications;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst ProjectSummary = (props) => {\r\n    const { project } = props;\r\n    return (\r\n        <div className=\"card z-depth-0 project-summary\">\r\n            <div className=\"card-content grey-text text-darken-3\">\r\n                <span className=\"card-title\">{project.title}</span>\r\n                <p>Posted by Aditya Shrivastav</p>\r\n                <p className=\"grey-text\">\r\n                    {moment(project.createdAt.toDate()).calendar()}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectSummary;\r\n","import React from 'react';\r\nimport ProjectSummary from './ProjectSummary';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ProjectList = (props) => {\r\n    const { projects } = props;\r\n    const projectsFromStore = projects ? (\r\n        projects.map((project) => {\r\n            return (\r\n                <Link to={'/projects/' + project.id} key={project.id}>\r\n                    <ProjectSummary project={project} />\r\n                </Link>\r\n            );\r\n        })\r\n    ) : (\r\n        <div>No projects left!</div>\r\n    );\r\n\r\n    return <div className=\"project-list section\">{projectsFromStore}</div>;\r\n};\r\n\r\nexport default ProjectList;\r\n","import React, { Component } from 'react';\r\nimport Notifications from './Notifications';\r\nimport ProjectList from '../projects/ProjectList';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        const { auth } = this.props;\r\n        const { projects } = this.props;\r\n        const { notifications } = this.props;\r\n\r\n        // Checking if user is logged in or not. If not then it redirects to sign in page. If yes then it skips the if statement.\r\n        if (!auth.uid) {\r\n            return <Redirect to=\"/signin\" />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container dashboard\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m6\">\r\n                        <ProjectList projects={projects} />\r\n                    </div>\r\n                    <div className=\"col s12 m5 offset-m1\">\r\n                        <Notifications notifications={notifications} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(state);\r\n    //Maps the state of redux store to props\r\n    return {\r\n        // Here the object returned are the properties that will be passed as props in this component\r\n        projects: state.firestore.ordered.projects,\r\n        auth: state.firebase.auth,\r\n        notifications: state.firestore.ordered.notifications\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps), // Connects the dashboard component to the redux store\r\n    firestoreConnect([\r\n        // When this component is active, the collection that it listens to is the projects and notifications collection\r\n        { collection: 'projects', orderBy: ['createdAt', 'desc'] },\r\n        { collection: 'notifications', limit: 3, orderBy: ['time', 'desc'] }\r\n    ])\r\n)(Dashboard);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { compose } from 'redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nconst ProjectDetails = (props) => {\r\n    const { project } = props;\r\n    if (project) {\r\n        const { auth } = props;\r\n\r\n        // Checking if user is logged in or not. If not then it redirects to sign in page. If yes then it skips the if statement.\r\n        if (!auth.uid) {\r\n            return <Redirect to=\"/signin\" />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container section project-details\">\r\n                <div className=\"card z-depth-0\">\r\n                    <div className=\"card-content\">\r\n                        <span className=\"card-title\">\r\n                            Project Details: {project.title}\r\n                        </span>\r\n                        <p>{project.content}</p>\r\n                    </div>\r\n                    <div className=\"card-action grey lighten-4 grey-text\">\r\n                        <div>\r\n                            Posted by {project.authorFirstName}{' '}\r\n                            {project.authorLastName}\r\n                        </div>\r\n                        <div>\r\n                            {moment(project.createdAt.toDate()).calendar()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <span>Project loading...</span>;\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const id = ownProps.match.params.id;\r\n    const projects = state.firestore.data.projects;\r\n\r\n    /*\r\n        if(projects) {\r\n            const project = projects[id];\r\n        } else {\r\n            null;\r\n        } \r\n    */\r\n    /* The above written commented code is the same as below written statement */\r\n    const project = projects ? projects[id] : null;\r\n    return {\r\n        project: project,\r\n        auth: state.firebase.auth\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([{ collection: 'projects' }])\r\n)(ProjectDetails);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { signIn } from '../../store/actions/authActions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass SignIn extends Component {\r\n    state = {\r\n        email: '',\r\n        password: ''\r\n    };\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        });\r\n    };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.signIn(this.state);\r\n    };\r\n    render() {\r\n        const { authError } = this.props;\r\n        const { auth } = this.props;\r\n\r\n        // Checking if user is logged in or not. If not then it redirects to sign in page. If yes then it skips the if statement.\r\n        if (auth.uid) {\r\n            return <Redirect to=\"/\" />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <form\r\n                    onSubmit={this.handleSubmit}\r\n                    className=\"white\"\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <h5 className=\"grey-text text-darken-3\">Sign In</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            autoComplete=\"off\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"off\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">\r\n                            Login\r\n                        </button>\r\n                        <div className=\"red-text center\">\r\n                            {authError ? <p>{authError}</p> : null}\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        authError: state.auth.authError,\r\n        auth: state.firebase.auth\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signIn: (credentials) => {\r\n            dispatch(signIn(credentials));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { signUp } from '../../store/actions/authActions';\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: ''\r\n    };\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        });\r\n    };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.signUp(this.state);\r\n    };\r\n    render() {\r\n        const { auth } = this.props;\r\n        const { authError } = this.props;\r\n\r\n        // Checking if user is logged in or not. If not then it redirects to sign in page. If yes then it skips the if statement.\r\n        if (auth.uid) {\r\n            return <Redirect to=\"/\" />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <form\r\n                    onSubmit={this.handleSubmit}\r\n                    className=\"white\"\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"firstName\"\r\n                            autoComplete=\"off\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"lastName\"\r\n                            autoComplete=\"off\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            autoComplete=\"off\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"off\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">\r\n                            Sign Up\r\n                        </button>\r\n                        <div className=\"red-text center\">\r\n                            {authError ? <p>{authError}</p> : null}\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth,\r\n        authError: state.auth.authError\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signUp: (newUser) => {\r\n            dispatch(signUp(newUser));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createProject } from '../../store/actions/projectActions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass CreateProject extends Component {\r\n    state = {\r\n        title: '',\r\n        content: ''\r\n    };\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        });\r\n    };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.createProject(this.state);\r\n        this.props.history.push('/');\r\n    };\r\n    render() {\r\n        const { auth } = this.props;\r\n\r\n        // Checking if user is logged in or not. If not then it redirects to sign in page. If yes then it skips the if statement.\r\n        if (!auth.uid) {\r\n            return <Redirect to=\"/signin\" />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <form\r\n                    onSubmit={this.handleSubmit}\r\n                    className=\"white\"\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <h5 className=\"grey-text text-darken-3\">\r\n                        Create new project\r\n                    </h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"title\">Title</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"title\"\r\n                            autoComplete=\"off\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"content\">Project content</label>\r\n                        <textarea\r\n                            id=\"content\"\r\n                            className=\"materialize-textarea\"\r\n                            onChange={this.handleChange}\r\n                        ></textarea>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">\r\n                            Create\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createProject: (project) => {\r\n            dispatch(createProject(project));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject);\r\n","export const createProject = (project) => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        // getFirebase and getFirestore are destructured\r\n\r\n        const firestore = getFirebase().firestore();\r\n        const authorId = getState().firebase.auth.uid;\r\n        firestore\r\n            .collection('projects')\r\n            .add({\r\n                ...project, // same as project.title, project.content\r\n                authorFirstName: 'Aditya',\r\n                authorLastName: 'Shrivastav',\r\n                authorId: authorId,\r\n                createdAt: new Date()\r\n            })\r\n            .then(() => {\r\n                // adding this collection to firestore is asynchronous i.e. it takes some time to do hence we used then method so that it only dispatches when this asynchronous call is completed.\r\n                // make async call to database\r\n                dispatch({ type: 'CREATE_PROJECT', project: project });\r\n            })\r\n            .catch((err) => {\r\n                dispatch({ type: 'CREATE_PROJECT_ERROR', err: err });\r\n            });\r\n    };\r\n};\r\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport ProjectDetails from './components/projects/ProjectDetails';\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport CreateProject from './components/projects/CreateProject';\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <Navbar />\n                <Switch>\n                    <Route exact path=\"/\" component={Dashboard} />\n                    <Route path=\"/projects/:id\" component={ProjectDetails} />\n                    <Route path=\"/signin\" component={SignIn} />\n                    <Route path=\"/signup\" component={SignUp} />\n                    <Route path=\"/create\" component={CreateProject} />\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    authError: null\r\n};\r\n\r\nconst authReducer = (state = initState, action) => {\r\n    if (action.type === 'LOGIN_ERROR') {\r\n        // whatever is returned will be the state of this reducer\r\n        console.log('Signin error');\r\n        return {\r\n            ...state,\r\n            authError: 'Login failed'\r\n        };\r\n    } else if (action.type === 'LOGIN_SUCCESS') {\r\n        // whatever is returned will be the state of this reducer\r\n        console.log('Signin success');\r\n        return {\r\n            ...state,\r\n            authError: null\r\n        };\r\n    } else if (action.type === 'LOGOUT_SUCCESS') {\r\n        // whatever is returned will be the state of this reducer\r\n        console.log('Signout successful!');\r\n        return state;\r\n    } else if (action.type === 'SIGNUP_SUCCESS') {\r\n        // whatever is returned will be the state of this reducer\r\n        console.log('Signup successful!');\r\n        return {\r\n            ...state,\r\n            authError: null\r\n        };\r\n    } else if (action.type === 'SIGNUP_ERROR') {\r\n        // whatever is returned will be the state of this reducer\r\n        console.log('Signup error');\r\n        return {\r\n            ...state,\r\n            authError: action.err.message\r\n        };\r\n    } else {\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n","const initState = {\r\n    projects: [\r\n        { id: 1, title: 'help me find alaska', content: 'blah blah blah' },\r\n        { id: 2, title: 'take me to church', content: 'yada yada yada' },\r\n        { id: 3, title: 'memories bring back memories', content: 'yap yap yap' }\r\n    ]\r\n};\r\n\r\n// const projectReducer = (state = initState, action) => {\r\n//     if (action.type === 'CREATE_PROJECT') {\r\n//         console.log('project made woohoo', action.project);\r\n//         return state;\r\n//     } else if (action.type === 'CREATE_PROJECT_ERROR') {\r\n//         console.log('project error occurred', action.err);\r\n//         return state;\r\n//     }\r\n//     return state;\r\n// };\r\n\r\nconst projectReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'CREATE_PROJECT':\r\n            console.log('project created woohoo', action.project);\r\n            return state;\r\n        case 'CREATE_PROJECT_ERROR':\r\n            console.log('project error occured', action.project);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default projectReducer;\r\n","import authReducer from './authReducer';\r\nimport projectReducer from './projectReducer';\r\nimport { firestoreReducer } from 'redux-firestore';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    project: projectReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: 'AIzaSyCCXL0nbo6N26vuKWr_CDF6mKweRmhBEE0',\r\n    authDomain: 'planit-1c161.firebaseapp.com',\r\n    databaseURL: 'https://planit-1c161.firebaseio.com',\r\n    projectId: 'planit-1c161',\r\n    storageBucket: 'planit-1c161.appspot.com',\r\n    messagingSenderId: '296745197735',\r\n    appId: '1:296745197735:web:2b122f1e5bd8bb734a7b82',\r\n    measurementId: 'G-TDX1EDKP15'\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.firestore();\r\n\r\nexport default firebase;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'; // allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met.\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport { createFirestoreInstance } from 'redux-firestore'; // allows you to use firebase or firestore API inside action creator\nimport firebase from './config/fbConfig';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk.withExtraArgument({ getFirebase })) // .withExtraArgument allows to pass additional arguments to thunk. Basically it allows to pass an object in which getFirebase and getFirestore are two properties.\n);\n\n// react-redux-firebase config- used when to add a collection of users, then it is passed to rrfprops\nconst rrfConfig = {\n    useFirestoreForProfile: true, // Firestore for Profile instead of Realtime DB\n    userProfile: 'users'\n};\n\nconst rrfProps = {\n    firebase,\n    config: rrfConfig,\n    dispatch: store.dispatch,\n    createFirestoreInstance // <- needed if using firestore\n};\n\nfirebase.auth().onAuthStateChanged((user) => {\n    if (user) {\n        ReactDOM.render(\n            <Provider store={store}>\n                <ReactReduxFirebaseProvider {...rrfProps}>\n                    <App />\n                </ReactReduxFirebaseProvider>\n            </Provider>,\n            document.getElementById('root')\n        );\n    } else {\n        ReactDOM.render(\n            <Provider store={store}>\n                <ReactReduxFirebaseProvider {...rrfProps}>\n                    <App />\n                </ReactReduxFirebaseProvider>\n            </Provider>,\n            document.getElementById('root')\n        );\n    }\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}